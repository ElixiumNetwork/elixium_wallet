defmodule ElixWallet.Wallet.NetworkHandler do
  require Logger
  use Supervisor

  def start_link() do
    GenServer.start_link(__MODULE__, [])
  end

  def init(_args) do
    timer = Process.send_after(self(), :work, 6_000)

    {:ok, %{timer: timer}}
  end

  def child_spec(_opts) do
      %{
        id: __MODULE__,
        start: {__MODULE__, :start_link,[]},
        type: :worker,
        restart: :permanent,
        shutdown: 500
      }
  end



  def handle_info(_, state) do
    Logger.warn("Received message that isn't handled by any other case.")

    {:noreply, state}
  end

  


  def reset_timer() do
   GenServer.call(__MODULE__, :reset_timer)
  end

 def handle_call(:reset_timer, _from, %{timer: timer}) do
   :timer.cancel(timer)
   timer = Process.send_after(self(), :work, 6_000)
   {:reply, :ok, %{timer: timer}}
 end

 def handle_info(:work, state) do
   IO.puts "Running Stats"
   get_stats() |> IO.inspect
   timer = Process.send_after(self(), :work, 6_000)

   {:noreply, %{timer: timer}}
 end

end
